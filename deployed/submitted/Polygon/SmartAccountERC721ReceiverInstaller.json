{
  "type": "deployment",
  "id": "SmartAccountERC721ReceiverInstaller",
  "batch": "Polygon",
  "batchIndex": 7,
  "deploymentAddress": "0x03d38803e07e0A2Fa5F934B352A281Ebc9027D42",
  "constructorArgs": ["0x4433B7Fcd9b90dACf14A54d55c3f6626C834f6E5"],
  "to": "0x4e59b44847b379578588920ca78fbf26c0b4956c",
  "value": "0",
  "data": "0x000000000000000000000000000000000000000000000000706c6f706d656e7a60a03461006f57601f61033238819003918201601f19168301916001600160401b038311848410176100735780849260209460405283398101031261006f57516001600160a01b038116810361006f576080526040516102aa908161008882396080518181816052015260c20152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60806040908082526004361015610014575f80fd5b5f3560e01c9081630d638f301461019557508063175a00611461008557633d308a311461003f575f80fd5b34610081575f36600319011261008157517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5f80fd5b5034610081575f366003190112610081577f0ec03a921b5deb73a9948473b4744dde91adeb598eacc1fca09623171feafb3e602060018060a01b037f000000000000000000000000000000000000000000000000000000000000000016927f0e1b22cdaccd652db85cbcd4ee8f705beabfaa30664122ccc544137ef20749bb81630a85bd0160e11b95865f527f56a2f102f06100e6e9193cce9cca60c6a83719df4146213240bdd4963e5931ba8552815f20816bffffffffffffffffffffffff60a01b82541617905581519087825285820152a1835f527f1164ff701c332a936c6fdd0cee9b71313a2f7a4aebd6e4eb4e5f25a54a3bd7d78252805f20600160ff198254161790555160018152a2005b8234610081575f366003190112610081576020817f0e1b22cdaccd652db85cbcd4ee8f705beabfaa30664122ccc544137ef20749bb7f0ec03a921b5deb73a9948473b4744dde91adeb598eacc1fca09623171feafb3e93630a85bd0160e11b95865f527f56a2f102f06100e6e9193cce9cca60c6a83719df4146213240bdd4963e5931ba8552815f206bffffffffffffffffffffffff60a01b81541690558681525f85820152a1835f527f1164ff701c332a936c6fdd0cee9b71313a2f7a4aebd6e4eb4e5f25a54a3bd7d78252805f2060ff198154169055515f8152a200fea264697066735822122011f53756f4bd1a62b10dfaeb1904c535ef45bb5fe22491945b340329ef6b8ecd64736f6c634300081700330000000000000000000000004433b7fcd9b90dacf14a54d55c3f6626c834f6e5",
  "gas": "205067",
  "from": "0x519ce4C129a981B2CBB4C3990B1391dA24E8EbF3",
  "transactionSettings": {
    "chainId": 137,
    "nonce": "133",
    "baseFee": "75000000000",
    "priorityFee": "30000000000"
  },
  "salt": "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000plopmenz",
  "artifact": {
    "abi": [
      {
        "type": "constructor",
        "inputs": [
          {
            "name": "smartAccountERC721Receiver",
            "type": "address",
            "internalType": "contract ISmartAccountERC721Receiver"
          }
        ],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "SMART_ACCOUNT_ERC721_RECEIVER",
        "inputs": [],
        "outputs": [
          {
            "name": "",
            "type": "address",
            "internalType": "contract ISmartAccountERC721Receiver"
          }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "install",
        "inputs": [],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "uninstall",
        "inputs": [],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "event",
        "name": "InterfaceSupportedChanged",
        "inputs": [
          {
            "name": "interfaceId",
            "type": "bytes4",
            "indexed": true,
            "internalType": "bytes4"
          },
          {
            "name": "supported",
            "type": "bool",
            "indexed": false,
            "internalType": "bool"
          }
        ],
        "anonymous": false
      },
      {
        "type": "event",
        "name": "ModuleSet",
        "inputs": [
          {
            "name": "functionSelector",
            "type": "bytes4",
            "indexed": false,
            "internalType": "bytes4"
          },
          {
            "name": "module",
            "type": "address",
            "indexed": false,
            "internalType": "address"
          }
        ],
        "anonymous": false
      }
    ],
    "bytecode": "0x60a03461006f57601f61033238819003918201601f19168301916001600160401b038311848410176100735780849260209460405283398101031261006f57516001600160a01b038116810361006f576080526040516102aa908161008882396080518181816052015260c20152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60806040908082526004361015610014575f80fd5b5f3560e01c9081630d638f301461019557508063175a00611461008557633d308a311461003f575f80fd5b34610081575f36600319011261008157517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5f80fd5b5034610081575f366003190112610081577f0ec03a921b5deb73a9948473b4744dde91adeb598eacc1fca09623171feafb3e602060018060a01b037f000000000000000000000000000000000000000000000000000000000000000016927f0e1b22cdaccd652db85cbcd4ee8f705beabfaa30664122ccc544137ef20749bb81630a85bd0160e11b95865f527f56a2f102f06100e6e9193cce9cca60c6a83719df4146213240bdd4963e5931ba8552815f20816bffffffffffffffffffffffff60a01b82541617905581519087825285820152a1835f527f1164ff701c332a936c6fdd0cee9b71313a2f7a4aebd6e4eb4e5f25a54a3bd7d78252805f20600160ff198254161790555160018152a2005b8234610081575f366003190112610081576020817f0e1b22cdaccd652db85cbcd4ee8f705beabfaa30664122ccc544137ef20749bb7f0ec03a921b5deb73a9948473b4744dde91adeb598eacc1fca09623171feafb3e93630a85bd0160e11b95865f527f56a2f102f06100e6e9193cce9cca60c6a83719df4146213240bdd4963e5931ba8552815f206bffffffffffffffffffffffff60a01b81541690558681525f85820152a1835f527f1164ff701c332a936c6fdd0cee9b71313a2f7a4aebd6e4eb4e5f25a54a3bd7d78252805f2060ff198154169055515f8152a200fea264697066735822122011f53756f4bd1a62b10dfaeb1904c535ef45bb5fe22491945b340329ef6b8ecd64736f6c63430008170033",
    "compiler": { "version": "v0.8.23+commit.f704f362" },
    "contractName": "src/modules/erc721-receiver/SmartAccountERC721ReceiverInstaller.sol:SmartAccountERC721ReceiverInstaller",
    "jsonDescription": {
      "language": "Solidity",
      "sources": {
        "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        },
        "src/modules/ISmartAccountModules.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ISmartAccountModules {\n    /// @notice When no function exists for function called\n    error FunctionNotFound(bytes4 functionSelector);\n\n    /// @notice Module is added/updated/removed.\n    event ModuleSet(bytes4 functionSelector, address module);\n\n    /// @notice Set the currently registered module for function.\n    /// @dev Zero address means no module is registered.\n    function getModule(bytes4 functionSelector) external view returns (address module);\n}\n"
        },
        "src/modules/SmartAccountModulesLib.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {SmartAccountERC165Lib} from \"./erc165/SmartAccountERC165Lib.sol\";\n\nimport {ISmartAccountModules} from \"./ISmartAccountModules.sol\";\n\n// Inspired by ERC-2535\nlibrary SmartAccountModulesLib {\n    bytes32 constant STORAGE_POSITION = keccak256(\"modules.smartaccount.plopmenz\");\n\n    struct Storage {\n        mapping(bytes4 functionSelector => address module) getFunction;\n    }\n\n    function getStorage() internal pure returns (Storage storage s) {\n        bytes32 position = STORAGE_POSITION;\n        assembly {\n            s.slot := position\n        }\n    }\n\n    /// @notice Sets the interfaces implemented by this contract to (un)supported.\n    function setInterfaces(bool supported) internal {\n        SmartAccountERC165Lib.setInterfaceSupport(type(ISmartAccountModules).interfaceId, supported);\n    }\n\n    /// @notice Installs all functions, interfaces, and performs storage initialization of this module.\n    function fullInstall(address module) internal {\n        setModule(ISmartAccountModules.getModule.selector, module);\n        setInterfaces(true);\n    }\n\n    /// @notice Uninstalls all functions and interfaces of this module.\n    function fullUninstall() internal {\n        setModule(ISmartAccountModules.getModule.selector, address(0));\n        setInterfaces(false);\n    }\n\n    /// @notice Get the currently registered module for function.\n    function getModule(bytes4 functionSelector) internal view returns (address module) {\n        return getStorage().getFunction[functionSelector];\n    }\n\n    /// @notice Set the currently registered module for function.\n    /// @dev Set to zero address to remove.\n    function setModule(bytes4 functionSelector, address module) internal {\n        getStorage().getFunction[functionSelector] = module;\n        emit ISmartAccountModules.ModuleSet(functionSelector, module);\n    }\n\n    /// @notice Delegates the current msg call to a module, if one is registered for that function.\n    function callModule() internal {\n        // Get module from function selector\n        address module = getModule(msg.sig);\n        if (module == address(0)) {\n            revert ISmartAccountModules.FunctionNotFound(msg.sig);\n        }\n        // Execute external function from module using delegatecall and return any value.\n        assembly {\n            // Copy function selector and any arguments\n            calldatacopy(0, 0, calldatasize())\n            // Execute function call using the module\n            let result := delegatecall(gas(), module, 0, calldatasize(), 0, 0)\n            // Get any return value\n            returndatacopy(0, 0, returndatasize())\n            // Return any return value or error back to the caller\n            switch result\n            case 0 { revert(0, returndatasize()) }\n            default { return(0, returndatasize()) }\n        }\n    }\n}\n"
        },
        "src/modules/erc165/ISmartAccountERC165.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC165} from \"../../../lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\";\n\ninterface ISmartAccountERC165 is IERC165 {\n    /// @notice Interface support changed.\n    event InterfaceSupportedChanged(bytes4 indexed interfaceId, bool supported);\n}\n"
        },
        "src/modules/erc165/SmartAccountERC165Lib.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {SmartAccountModulesLib} from \"../SmartAccountModulesLib.sol\";\n\nimport {ISmartAccountERC165, IERC165} from \"./ISmartAccountERC165.sol\";\n\nlibrary SmartAccountERC165Lib {\n    bytes32 constant STORAGE_POSITION = keccak256(\"erc165.modules.smartaccount.plopmenz\");\n\n    struct Storage {\n        mapping(bytes4 interfaceId => bool supported) getSupported;\n    }\n\n    function getStorage() internal pure returns (Storage storage s) {\n        bytes32 position = STORAGE_POSITION;\n        assembly {\n            s.slot := position\n        }\n    }\n\n    /// @notice Installs all functions, interfaces, and performs storage initialization of this module.\n    function fullInstall(address module) internal {\n        SmartAccountModulesLib.setModule(IERC165.supportsInterface.selector, module);\n    }\n\n    /// @notice Uninstalls all functions and interfaces of this module.\n    function fullUninstall() internal {\n        SmartAccountModulesLib.setModule(IERC165.supportsInterface.selector, address(0));\n    }\n\n    /// @notice Gets the interfaces supported by the Smart Account.\n    function supportsInterface(bytes4 interfaceId) internal view returns (bool supported) {\n        return getStorage().getSupported[interfaceId];\n    }\n\n    /// @notice Updates the interfaces supported by the Smart Account.\n    function setInterfaceSupport(bytes4 interfaceId, bool supported) internal {\n        getStorage().getSupported[interfaceId] = supported;\n        emit ISmartAccountERC165.InterfaceSupportedChanged(interfaceId, supported);\n    }\n}\n"
        },
        "src/modules/erc721-receiver/ISmartAccountERC721Receiver.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC721Receiver} from \"../../../lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\";\n\ninterface ISmartAccountERC721Receiver is IERC721Receiver {}\n"
        },
        "src/modules/erc721-receiver/SmartAccountERC721ReceiverInstaller.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {SmartAccountERC721ReceiverLib, ISmartAccountERC721Receiver} from \"./SmartAccountERC721ReceiverLib.sol\";\n\ncontract SmartAccountERC721ReceiverInstaller {\n    ISmartAccountERC721Receiver public immutable SMART_ACCOUNT_ERC721_RECEIVER;\n\n    constructor(ISmartAccountERC721Receiver smartAccountERC721Receiver) {\n        SMART_ACCOUNT_ERC721_RECEIVER = smartAccountERC721Receiver;\n    }\n\n    /// @notice Installs the trustless execution module into a smart account\n    function install() public virtual {\n        SmartAccountERC721ReceiverLib.fullInstall(address(SMART_ACCOUNT_ERC721_RECEIVER));\n    }\n\n    /// @notice Uninstalls the trustless execution module of a smart account.\n    function uninstall() public virtual {\n        SmartAccountERC721ReceiverLib.fullUninstall();\n    }\n}\n"
        },
        "src/modules/erc721-receiver/SmartAccountERC721ReceiverLib.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {SmartAccountERC165Lib} from \"../erc165/SmartAccountERC165Lib.sol\";\nimport {SmartAccountModulesLib} from \"../SmartAccountModulesLib.sol\";\n\nimport {ISmartAccountERC721Receiver, IERC721Receiver} from \"./ISmartAccountERC721Receiver.sol\";\n\nlibrary SmartAccountERC721ReceiverLib {\n    /// @notice Sets the interfaces implemented by this contract to (un)supported.\n    function setInterfaces(bool supported) internal {\n        SmartAccountERC165Lib.setInterfaceSupport(type(IERC721Receiver).interfaceId, supported);\n    }\n\n    /// @notice Installs all functions, interfaces, and performs storage initialization of this module.\n    function fullInstall(address module) internal {\n        SmartAccountModulesLib.setModule(IERC721Receiver.onERC721Received.selector, module);\n        setInterfaces(true);\n    }\n\n    /// @notice Uninstalls all functions and interfaces of this module.\n    function fullUninstall() internal {\n        SmartAccountModulesLib.setModule(IERC721Receiver.onERC721Received.selector, address(0));\n        setInterfaces(false);\n    }\n}\n"
        }
      },
      "settings": {
        "remappings": [
          "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
          "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
          "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
          "forge-std/=lib/forge-std/src/",
          "openzeppelin-contracts/=lib/openzeppelin-contracts/"
        ],
        "optimizer": { "enabled": true, "runs": 200 },
        "evmVersion": "shanghai",
        "viaIR": true
      },
      "metadata": { "useLiteralContent": true }
    },
    "license": "MIT"
  },
  "source": "/home/plopmenz/smart-account",
  "submitted": {
    "transactionHash": "0x833e45babfbacdf9c6da9df8457133747f76a1750359bec7929b6ee08b7b2ba2",
    "date": "2024-04-24T20:54:34.250Z"
  }
}
